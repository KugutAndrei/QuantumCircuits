Описание TinyUsefulLib (все массивы numpy)

––––––––––––––––––––––––––––––––––––
Рисунки
––––––––––––––––––––––––––––––––––––

Graphs(t, X, x='x', y='y', full=False, save=False, filename='')
строит график n функций с возможностью сохранения

params:
  t[n] - сетка времени //
  X[n, m] - список из n массивов - значений функций на сетке //
  x,y – подписи осей
  full=True – выводит дополнительно график суммы всех n функций
  save=True – включает сохранение 
  filename – имя сохраняемого файла

––––––––––––––––––––––––––––––––––––
  
PlotPcolormesh(fidelity, x, y, xlabel = 'x', ylabel = 'y', opt_lines=True, 
                    title=None, save=False, filename=''):
строит pcolormesh с выводом макс. fidelity с возможностью сохранения

params:
  fidelity[n, m] - матрица значений
  x[n], y[m] – соответствующие массивы аргументов
  xlabel, ylabel – подписи осей
  opt_lines=True – ищет точку максимума fidelity, которую рисует вместе с соотв. знач. fidelity
  title – название картинки
  save=True – включает сохранение 
  filename – имя сохраняемого файла
                    
––––––––––––––––––––––––––––––––––––        
            
StatesRepr(state, bSize, size)
строит квадратные таблицы вероятностей нахождения состояний объединения систем A и B
в состоянии (n, m) общего базиса A⊗B, где n - уровни A и m – уровни B

params:
  state[i, j] – матрица из j состояний-столбцов в базиса A⊗B
  bSize – размер базиса системы B
  size – размер N таблиц NxN

––––––––––––––––––––––––––––––––––––
Моделирование
––––––––––––––––––––––––––––––––––––

Oscillator(omega, numOfLevels=100)
создает осциллятор

params:
  omega – частота осциллятора
  numOfLevels  – кол-во уровней

return: (eigEnergies, at, a)
  eigEnergies[n] – массив уровней энергии
  at – оператор рождения
  a – оператор уничтожения
  
––––––––––––––––––––––––––––––––––––

Fluxonium(Ej, El, Ec, gridSize=100, numOfLvls=100, leftBorder=-20, rightBorder=20, F=0)
создает флаксониум (нулевые гран условия по потоку)

params:
  Ej – джозефсоновская энергия
  El – индуктвная энергия
  Ec – емкостная энергия
  leftBorder, rightBorder – границы сетки потока
  F – поток через флаксониум (F=0 соответствует рабочей точке в пол кванта)
  
return: (eigEnergies, phi, q)
  eigEnergies[n] – массив уровней энергии
  phi – оператор потока в собственном базисе флаксониума
  q – оператор заряда в собственном базисе флаксониума
 
–––––––––––––––––––––––––––––––––––– 
 
 Transmon(Ej1, Ej2, Ec, gridSize = 100, numOfLvls = 100, F=0):
 создает трансмон (нулевые гран условия по заряду)
 
 params:
  Ej1, Ej2 – джозефсоновские энергии
  Ec – емкостная энергия
  F – поток через трансмон

return: (eigEnergies, phi, q)
  eigEnergies[n] – массив уровней энергии
  phi – оператор потока в собственном базисе трансмона
  q – оператор заряда в собственном базисе трансмона
  
––––––––––––––––––––––––––––––––––––
  
MixOfTwoSys(spect1, spect2, q1, q2, opers1=np.asarray([]), opers2=np.asarray([]), g=0, numOfLvls=5)
объединяет системы H1 и H2 через g*q1*q2 (даигонализует H1 + H2 + g*q1*q2)

params:
  spect1, spect1 – массивы уровней энергий систем
  q1, q2 – операторы в собственных базисах соотв. систем, через которые происходит связь
  opers1, opers2 – массивы операторов в собственных базисах соотв. систем, которые хотим перевести в базис H1⊗H2
  g – связь
  
return: (eigEnergies, eigVectors, H, newOpers1, newOpers2)
  newOpers1, newOpers2 – массивы операторов из opers1, opers2 в базисе H1⊗H2 (НЕ ВЫВОДЯТСЯ, ЕСЛИ НЕ ЗАПОЛНЯТЬ opers1, opers2 соответственно)
  H – гамилтониан H1 + H2 + g*q1*q2
  eigVectors – собственные состояния H
  eigEnergies – собственные энергии H
  
  